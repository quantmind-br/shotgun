name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Pre-Release Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run full test suite
      run: |
        echo "=== Running Full Test Suite with Race Detection ==="
        go test -v -race -coverprofile=coverage.out ./...
        
        # Check test coverage
        COVERAGE=$(go tool cover -func=coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//')
        echo "=== Test Coverage: ${COVERAGE}% ==="
        
        # Ensure minimum coverage threshold (60% - realistic for current state)
        if (( $(echo "${COVERAGE} < 60" | bc -l) )); then
          echo "❌ Test coverage ${COVERAGE}% is below required 60%"
          exit 1
        else
          echo "✅ Test coverage ${COVERAGE}% meets requirement"
        fi

    - name: Run terminal compatibility tests
      run: |
        echo "=== Running Terminal Compatibility Tests ==="
        go test -v ./internal/utils/ -run TestDetectTerminalCapabilities
        go test -v ./internal/utils/ -run TestGetKeyboardCapabilities  
        go test -v ./internal/styles/ -run TestNewThemeConfig

    - name: Run static analysis and linting
      run: |
        echo "=== Running Static Analysis ==="
        # Install golangci-lint if not available
        if ! command -v golangci-lint &> /dev/null; then
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
        fi
        
        # Run golangci-lint
        golangci-lint run --timeout=5m ./...
        
        # Run go vet
        go vet ./...
        
        # Check for security issues
        if command -v gosec &> /dev/null; then
          gosec ./...
        fi

    - name: Build test for all platforms
      run: |
        echo "=== Testing Cross-Platform Builds ==="
        PLATFORMS=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64" "windows/arm64" "freebsd/amd64")
        
        for platform in "${PLATFORMS[@]}"; do
          GOOS=$(echo $platform | cut -d'/' -f1)
          GOARCH=$(echo $platform | cut -d'/' -f2)
          
          echo "Testing build for ${GOOS}/${GOARCH}..."
          CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -v -o /tmp/shotgun-test-${GOOS}-${GOARCH} ./cmd/shotgun
          
          # Verify binary was created
          if [[ -f "/tmp/shotgun-test-${GOOS}-${GOARCH}" ]]; then
            echo "✅ ${GOOS}/${GOARCH} build successful"
            rm -f "/tmp/shotgun-test-${GOOS}-${GOARCH}"
          else
            echo "❌ ${GOOS}/${GOARCH} build failed"
            exit 1
          fi
        done
        
        echo "✅ All platform builds successful"

    - name: Verify version embedding
      run: |
        echo "=== Testing Version Embedding ==="
        # Build with version info
        CGO_ENABLED=0 go build -ldflags="-X main.Version=test-version -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.GitCommit=test-commit" -o shotgun-version-test ./cmd/shotgun
        
        # Test version command
        VERSION_OUTPUT=$(./shotgun-version-test version)
        echo "Version output: $VERSION_OUTPUT"
        
        # Verify version info is embedded
        if [[ $VERSION_OUTPUT == *"test-version"* ]]; then
          echo "✅ Version embedding working"
        else
          echo "❌ Version embedding failed"
          exit 1
        fi
        
        # Test JSON version output
        JSON_OUTPUT=$(./shotgun-version-test version --json)
        echo "JSON output: $JSON_OUTPUT"
        
        if [[ $JSON_OUTPUT == *"test-version"* ]] && [[ $JSON_OUTPUT == *"test-commit"* ]]; then
          echo "✅ JSON version output working"
        else
          echo "❌ JSON version output failed"
          exit 1
        fi
        
        rm -f shotgun-version-test

  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            platform: linux-amd64
          - goos: linux
            goarch: arm64
            platform: linux-arm64
          - goos: darwin
            goarch: amd64
            platform: darwin-amd64
          - goos: darwin
            goarch: arm64
            platform: darwin-arm64
          - goos: windows
            goarch: amd64
            platform: windows-amd64
          - goos: windows
            goarch: arm64
            platform: windows-arm64
          - goos: freebsd
            goarch: amd64
            platform: freebsd-amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        BINARY_NAME="shotgun-${{ matrix.platform }}"
        
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        echo "Building ${BINARY_NAME} for ${{ matrix.goos }}/${{ matrix.goarch }}"
        
        go build \
          -v \
          -ldflags="-s -w -X main.Version=${VERSION} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.GitCommit=${GITHUB_SHA}" \
          -o "${BINARY_NAME}" \
          ./cmd/shotgun
          
        # Display build information
        echo "=== Build Information ==="
        echo "Binary: ${BINARY_NAME}"
        echo "Size: $(du -h ${BINARY_NAME} | cut -f1)"
        echo "Platform: ${{ matrix.goos }}/${{ matrix.goarch }}"
        echo "CGO Enabled: ${CGO_ENABLED}"
        echo "Build flags: -s -w (strip debug symbols and DWARF table)"

    - name: Create archive
      run: |
        BINARY_NAME="shotgun-${{ matrix.platform }}"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Prepare additional files to include in archives
        ADDITIONAL_FILES=""
        if [[ -f "README.md" ]]; then
          ADDITIONAL_FILES="${ADDITIONAL_FILES} README.md"
        fi
        if [[ -f "LICENSE" ]]; then
          ADDITIONAL_FILES="${ADDITIONAL_FILES} LICENSE"
        fi
        
        # Create platform-appropriate archives with consistent naming conventions
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          ARCHIVE_NAME="${BINARY_NAME%.exe}.zip"
          echo "Creating Windows archive: ${ARCHIVE_NAME}"
          if [[ -n "${ADDITIONAL_FILES}" ]]; then
            zip -q "${ARCHIVE_NAME}" "${BINARY_NAME}"${ADDITIONAL_FILES}
          else
            zip -q "${ARCHIVE_NAME}" "${BINARY_NAME}"
          fi
        else
          ARCHIVE_NAME="${BINARY_NAME}.tar.gz"
          echo "Creating Unix archive: ${ARCHIVE_NAME}"
          if [[ -n "${ADDITIONAL_FILES}" ]]; then
            tar -czf "${ARCHIVE_NAME}" "${BINARY_NAME}"${ADDITIONAL_FILES}
          else
            tar -czf "${ARCHIVE_NAME}" "${BINARY_NAME}"
          fi
        fi
        
        # Verify archive creation
        echo "=== Archive Information ==="
        echo "Archive: ${ARCHIVE_NAME}"
        echo "Size: $(du -h ${ARCHIVE_NAME} | cut -f1)"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          echo "Contents: $(unzip -l ${ARCHIVE_NAME} | tail -n +4 | head -n -2)"
        else
          echo "Contents: $(tar -tzf ${ARCHIVE_NAME})"
        fi

    - name: Generate checksums
      run: |
        BINARY_NAME="shotgun-${{ matrix.platform }}"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          BINARY_NAME="${BINARY_NAME}.exe"
          ARCHIVE_NAME="${BINARY_NAME%.exe}.zip"
        else
          ARCHIVE_NAME="${BINARY_NAME}.tar.gz"
        fi
        
        # Generate SHA256 checksums for both binaries and archives
        echo "=== Generating SHA256 Checksums ==="
        sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
        sha256sum "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"
        
        # Display checksums for verification
        echo "=== Checksums Generated ==="
        echo "Binary checksum (${BINARY_NAME}):"
        cat "${BINARY_NAME}.sha256"
        echo ""
        echo "Archive checksum (${ARCHIVE_NAME}):"
        cat "${ARCHIVE_NAME}.sha256"
        
        # Verify checksums can be validated
        echo "=== Checksum Verification ==="
        if sha256sum -c "${BINARY_NAME}.sha256" && sha256sum -c "${ARCHIVE_NAME}.sha256"; then
          echo "✅ All checksums verified successfully"
        else
          echo "❌ Checksum verification failed"
          exit 1
        fi
        
        # List all release artifacts created
        echo "=== Release Artifacts Created ==="
        ls -la "${BINARY_NAME}"* "${ARCHIVE_NAME}"*
        
    - name: Test binary execution (where possible)
      run: |
        BINARY_NAME="shotgun-${{ matrix.platform }}"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        echo "=== Testing Binary Execution ==="
        
        # Only test on Linux binaries (since we're running on Linux)
        if [[ "${{ matrix.goos }}" == "linux" ]]; then
          echo "Testing ${BINARY_NAME} execution..."
          
          # Test help command
          ./${BINARY_NAME} --help
          
          # Test version command
          VERSION_OUTPUT=$(./${BINARY_NAME} version)
          echo "Version output: $VERSION_OUTPUT"
          
          # Test JSON version
          JSON_OUTPUT=$(./${BINARY_NAME} version --json)
          echo "JSON output: $JSON_OUTPUT"
          
          echo "✅ Binary execution test passed"
        else
          echo "Skipping execution test for ${{ matrix.goos }} (cross-compiled binary)"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: shotgun-${{ matrix.platform }}-release
        path: |
          shotgun-${{ matrix.platform }}*
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Organize release files
      run: |
        mkdir -p release-files
        find release-artifacts -name "shotgun-*" -type f | while read file; do
          cp "$file" release-files/
        done
        
        echo "=== Release Files ==="
        ls -la release-files/

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        cat > release-notes.md << EOF
        ## Shotgun ${VERSION} - Cross-Platform Terminal Application
        
        Fast project scaffolding tool with comprehensive terminal compatibility support. This release includes optimized binaries for all major platforms with static linking for maximum compatibility.
        
        ### 🚀 Platform Matrix
        
        | Platform | Architecture | Binary | Archive | Checksum |
        |----------|-------------|---------|---------|----------|
        | **Linux** | x86_64 | \`shotgun-linux-amd64\` | \`shotgun-linux-amd64.tar.gz\` | \`*.sha256\` |
        | **Linux** | ARM64 | \`shotgun-linux-arm64\` | \`shotgun-linux-arm64.tar.gz\` | \`*.sha256\` |
        | **macOS** | Intel | \`shotgun-darwin-amd64\` | \`shotgun-darwin-amd64.tar.gz\` | \`*.sha256\` |
        | **macOS** | Apple Silicon | \`shotgun-darwin-arm64\` | \`shotgun-darwin-arm64.tar.gz\` | \`*.sha256\` |
        | **Windows** | x86_64 | \`shotgun-windows-amd64.exe\` | \`shotgun-windows-amd64.zip\` | \`*.sha256\` |
        | **Windows** | ARM64 | \`shotgun-windows-arm64.exe\` | \`shotgun-windows-arm64.zip\` | \`*.sha256\` |
        | **FreeBSD** | x86_64 | \`shotgun-freebsd-amd64\` | \`shotgun-freebsd-amd64.tar.gz\` | \`*.sha256\` |
        
        ### 🎨 Terminal Compatibility Features
        
        - 🎨 **True Color** support (16.7 million colors) - Modern terminals
        - 🌈 **256 Color** terminal support - Standard terminal emulators
        - 🔧 **16 Color** terminal fallback - Legacy terminal support
        - ⚫ **Monochrome** terminal fallback - Text-only environments
        - 🔤 **Unicode** character support with ASCII fallbacks
        - ⌨️ **Cross-platform** keyboard handling with native key detection
        - 📏 **Responsive** UI that adapts to terminal size changes
        
        ### 🔧 Environment Variables
        
        Configure terminal behavior and appearance:
        
        - \`FORCE_COLOR=0|1|2|3\` - Force specific color support level (0=none, 1=16, 2=256, 3=truecolor)
        - \`NO_COLOR=1\` - Disable all colors (overrides FORCE_COLOR)
        - \`TERM\` - Automatically detected for terminal capabilities
        - \`COLORTERM=truecolor\` - Enhanced color support detection
        - \`SHOTGUN_CONFIG_DIR\` - Custom configuration directory path
        
        ### 📦 Installation Instructions
        
        #### Linux / macOS / FreeBSD
        \`\`\`bash
        # Download and extract
        wget https://github.com/diogopedro/shotgun/releases/download/${VERSION}/shotgun-linux-amd64.tar.gz
        tar -xzf shotgun-linux-amd64.tar.gz
        
        # Verify checksum (recommended)
        sha256sum -c shotgun-linux-amd64.sha256
        
        # Make executable and install
        chmod +x shotgun-linux-amd64
        sudo mv shotgun-linux-amd64 /usr/local/bin/shotgun
        
        # Verify installation
        shotgun version
        \`\`\`
        
        #### Windows (PowerShell)
        \`\`\`powershell
        # Download and extract
        Invoke-WebRequest -Uri "https://github.com/diogopedro/shotgun/releases/download/${VERSION}/shotgun-windows-amd64.zip" -OutFile "shotgun-windows-amd64.zip"
        Expand-Archive -Path "shotgun-windows-amd64.zip" -DestinationPath "."
        
        # Verify checksum (recommended)
        \$expected = Get-Content shotgun-windows-amd64.exe.sha256
        \$actual = Get-FileHash shotgun-windows-amd64.exe -Algorithm SHA256
        if (\$expected.Split(" ")[0] -eq \$actual.Hash.ToLower()) { Write-Host "✅ Checksum verified" } else { Write-Host "❌ Checksum failed" }
        
        # Add to PATH or run directly
        ./shotgun-windows-amd64.exe version
        \`\`\`
        
        ### 🔐 Checksum Verification
        
        **Why verify checksums?** Ensures file integrity and authenticity.
        
        Each binary and archive includes a corresponding \`.sha256\` file containing SHA256 checksums:
        
        #### Unix/Linux/macOS
        \`\`\`bash
        # Verify binary
        sha256sum -c shotgun-linux-amd64.sha256
        
        # Verify archive  
        sha256sum -c shotgun-linux-amd64.tar.gz.sha256
        \`\`\`
        
        #### Windows (PowerShell)
        \`\`\`powershell
        # Verify binary
        \$expected = (Get-Content shotgun-windows-amd64.exe.sha256).Split(" ")[0]
        \$actual = (Get-FileHash shotgun-windows-amd64.exe -Algorithm SHA256).Hash.ToLower()
        if (\$expected -eq \$actual) { Write-Host "✅ Verified" } else { Write-Host "❌ Failed" }
        \`\`\`
        
        ### ⚡ Quick Start
        
        \`\`\`bash
        # Launch interactive TUI mode
        shotgun
        
        # Initialize .shotgunignore file
        shotgun init
        
        # Show version information
        shotgun version --json
        
        # Get help
        shotgun --help
        \`\`\`
        
        ### 🏗️ Build Information
        
        - **Go Version**: $(go version | cut -d' ' -f3)
        - **Build Flags**: \`-ldflags="-s -w"\` (optimized, stripped)
        - **CGO**: Disabled (static binaries)
        - **Platforms**: 7 platform/architecture combinations
        - **Binary Size**: ~10-15MB (optimized)
        
        EOF
        
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        files: release-files/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Update installation docs
      run: |
        echo "Release ${{ steps.version.outputs.version }} completed successfully!"
        echo "Binaries available for:"
        echo "- Linux (amd64, arm64)"
        echo "- macOS (amd64, arm64)"
        echo "- Windows (amd64, arm64)"
        echo "- FreeBSD (amd64)"
        
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "🎉 Successfully released ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Platforms Released" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Linux (x86_64, ARM64)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ macOS (Intel, Apple Silicon)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Windows (x86_64, ARM64)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ FreeBSD (x86_64)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Features" >> $GITHUB_STEP_SUMMARY
        echo "- 🎨 Cross-platform terminal compatibility" >> $GITHUB_STEP_SUMMARY
        echo "- 🌈 Graceful color degradation" >> $GITHUB_STEP_SUMMARY
        echo "- 🔤 Unicode fallback support" >> $GITHUB_STEP_SUMMARY
        echo "- ⌨️ Platform-specific keyboard handling" >> $GITHUB_STEP_SUMMARY