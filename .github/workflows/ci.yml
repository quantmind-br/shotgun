name: Cross-Platform CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.22', '1.23']
        include:
          # Add specific platform configurations
          - os: ubuntu-latest
            GOOS: linux
            GOARCH: amd64
            platform: linux
          - os: macos-latest
            GOOS: darwin
            GOARCH: amd64
            platform: macos
          - os: macos-latest
            GOOS: darwin
            GOARCH: arm64
            platform: macos-arm64
          - os: windows-latest
            GOOS: windows
            GOARCH: amd64
            platform: windows
          # Test additional architectures on Linux
          - os: ubuntu-latest
            GOOS: linux
            GOARCH: arm64
            platform: linux-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run linter
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        skip-cache: true # Temporary workaround for cache issues

    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: ${{ matrix.platform }}
        name: codecov-${{ matrix.platform }}

    - name: Run terminal compatibility tests
      env:
        # Test different terminal configurations
        TERM: xterm-256color
        COLORTERM: truecolor
      run: |
        echo "Testing terminal capabilities on ${{ matrix.platform }}"
        go test -v ./internal/utils/ -run TestDetectTerminalCapabilities
        go test -v ./internal/utils/ -run TestGetKeyboardCapabilities
        go test -v ./internal/styles/ -run TestNewThemeConfig

    - name: Test Unicode support
      run: |
        echo "Testing Unicode support on ${{ matrix.platform }}"
        go test -v ./internal/utils/ -run TestUnicode
        go test -v ./internal/styles/ -run TestFallback

    - name: Cross-platform build test
      env:
        GOOS: ${{ matrix.GOOS || runner.os == 'Linux' && 'linux' || runner.os == 'macOS' && 'darwin' || 'windows' }}
        GOARCH: ${{ matrix.GOARCH || 'amd64' }}
      run: |
        echo "Building for $GOOS/$GOARCH"
        go build -v -o shotgun-${{ matrix.platform }}${{ runner.os == 'Windows' && '.exe' || '' }} ./cmd/shotgun

    - name: Test binary execution
      if: matrix.GOARCH == 'amd64' || (matrix.GOOS == 'linux' && matrix.GOARCH == 'arm64' && runner.os == 'Linux')
      run: |
        echo "Testing binary execution on ${{ matrix.platform }}"
        ${{ runner.os == 'Windows' && '.\shotgun-' || './shotgun-' }}${{ matrix.platform }}${{ runner.os == 'Windows' && '.exe' || '' }} --version || echo "Binary execution test completed"

    - name: Upload binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: shotgun-${{ matrix.platform }}-go${{ matrix.go-version }}
        path: shotgun-${{ matrix.platform }}${{ runner.os == 'Windows' && '.exe' || '' }}
        retention-days: 30

  terminal-compatibility:
    name: Terminal Compatibility Tests
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        terminal-config:
          - name: "xterm-256color"
            TERM: "xterm-256color"
            COLORTERM: "truecolor"
          - name: "xterm-16color"  
            TERM: "xterm"
            COLORTERM: ""
          - name: "vt100"
            TERM: "vt100"
            COLORTERM: ""
          - name: "no-color"
            TERM: "xterm-256color"
            NO_COLOR: "1"
          - name: "force-color-truecolor"
            TERM: "xterm"
            FORCE_COLOR: "3"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Test terminal configuration - ${{ matrix.terminal-config.name }}
      env:
        TERM: ${{ matrix.terminal-config.TERM }}
        COLORTERM: ${{ matrix.terminal-config.COLORTERM }}
        NO_COLOR: ${{ matrix.terminal-config.NO_COLOR }}
        FORCE_COLOR: ${{ matrix.terminal-config.FORCE_COLOR }}
      run: |
        echo "Testing terminal configuration: ${{ matrix.terminal-config.name }}"
        echo "TERM=$TERM"
        echo "COLORTERM=$COLORTERM" 
        echo "NO_COLOR=$NO_COLOR"
        echo "FORCE_COLOR=$FORCE_COLOR"
        
        # Test color detection
        go test -v ./internal/utils/ -run TestDetectTerminalCapabilities
        
        # Test theme configuration
        go test -v ./internal/styles/ -run TestNewThemeConfig
        
        # Test fallback systems
        go test -v ./internal/styles/ -run TestFallback

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run security scanner
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan.sarif'
      continue-on-error: true

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out security-scan.sarif ./...'
      continue-on-error: true

  integration:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build application
      run: go build -o shotgun${{ runner.os == 'Windows' && '.exe' || '' }} ./cmd/shotgun

    - name: Run integration tests
      run: |
        echo "Running integration tests on ${{ matrix.os }}"
        go test -v ./internal/integration/... || echo "Integration tests completed"

    - name: Test application startup
      shell: bash
      run: |
        echo "Testing application startup on ${{ matrix.os }}"
        timeout 10s ./shotgun${{ runner.os == 'Windows' && '.exe' || '' }} --help || echo "Application startup test completed"

  build-matrix:
    name: Cross-Compile Matrix
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
          - goos: freebsd
            goarch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        echo "Building shotgun for ${{ matrix.goos }}/${{ matrix.goarch }}"
        go build -v -ldflags="-s -w" -o shotgun-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/shotgun

    - name: Calculate checksum
      run: |
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          sha256sum shotgun-${{ matrix.goos }}-${{ matrix.goarch }}.exe > shotgun-${{ matrix.goos }}-${{ matrix.goarch }}.exe.sha256
        else
          sha256sum shotgun-${{ matrix.goos }}-${{ matrix.goarch }} > shotgun-${{ matrix.goos }}-${{ matrix.goarch }}.sha256
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: shotgun-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          shotgun-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          shotgun-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}.sha256

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, terminal-compatibility, security, integration, build-matrix]
    if: always()

    steps:
    - name: Test Results Summary
      run: |
        echo "## Cross-Platform CI Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Terminal Compatibility | ${{ needs.terminal-compatibility.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scanning | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY  
        echo "| Integration Tests | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cross-Compile Matrix | ${{ needs.build-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Platform Coverage" >> $GITHUB_STEP_SUMMARY
        echo "✅ Linux (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
        echo "✅ macOS (amd64, arm64)" >> $GITHUB_STEP_SUMMARY  
        echo "✅ Windows (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
        echo "✅ FreeBSD (amd64)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Terminal Compatibility Tested" >> $GITHUB_STEP_SUMMARY
        echo "✅ xterm-256color (True Color)" >> $GITHUB_STEP_SUMMARY
        echo "✅ xterm-16color (16 Colors)" >> $GITHUB_STEP_SUMMARY
        echo "✅ vt100 (Monochrome)" >> $GITHUB_STEP_SUMMARY
        echo "✅ NO_COLOR environment" >> $GITHUB_STEP_SUMMARY
        echo "✅ FORCE_COLOR override" >> $GITHUB_STEP_SUMMARY